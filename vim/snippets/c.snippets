# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If  
snippet f
	if (${1:/* condition */})
		${2:/* code */}
# If goto  
snippet fg
	if (${1:/* condition */})
		goto ${2:/* code */};
# If return 
snippet fr
	if (${1:/* condition */})
		return ${2:/* code */};
# goto 
snippet g
	goto ${1:/* condition */};
# return 
snippet r 
	return ${1:/* condition */};
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
#else if
snippet elif
	else if (${1}) {
	        ${2:/* code */}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}

# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
snippet prd
	printf("%s %d\n", __func__, __LINE__);${3}
snippet pk
	printk("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
#memory
snippet mcp
	memcpy(${1:dest}, ${2:src}, ${3:size});${4}
snippet mcmp
	memcmp(${1:s1}, ${2:s2}, ${3:size});${4}
snippet mset
	memset(${1:src}, ${2:0}, ${3:size});${4}
# This is kind of convenient
snippet sz
	sizeof(${1:})
snippet s
	struct ${1:}
#kzalloc
snippet kz
	kzalloc(${1}, GFP_KERNEL);
#kfree
snippet kf
	kfree(${1});
snippet sw
	switch (${1:/* condition */}) {
	${2}
	}
snippet case
	case ${1}:
		${2:/* code */}
		break;
	${3}
snippet MODULE_
	MODULE_LICENSE("GPL");
	MODULE_AUTHOR("${1:/* author */}");
	MODULE_VERSION("${2:/* version */}");
	MODULE_DESCRIPTION("${3:/* description *}");
